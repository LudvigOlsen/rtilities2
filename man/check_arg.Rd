% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_argument.R
\name{check_arg}
\alias{check_arg}
\alias{check_arg_str}
\title{Apply common checks to a passed argument}
\usage{
check_arg(
  arg,
  type_check_fn = NULL,
  has_length = NULL,
  not_length = NULL,
  length_fn = length,
  allowed_values = NULL,
  in_range = NULL,
  allowed_names = NULL,
  required_names = NULL,
  check_not_named = FALSE,
  check_all_named = FALSE,
  check_all_uniquely_named = FALSE,
  allow_null = TRUE,
  arg_name = NULL,
  type_name = NULL,
  length_name = NULL,
  message_fn = stop
)

check_arg_str(..., message_fn = return)
}
\arguments{
\item{arg}{The variable to apply the checks to.
Can for instance be used to check the input of a function argument.}

\item{type_check_fn}{Function for checking the type of \code{arg}.
Like \code{\link[base:is.character]{is.character}} and \code{\link[base:is.numeric]{is.numeric}}.

When passing anonymous functions or functions with ambigious names,
consider passing \code{type_name} as well, for better error messages.}

\item{has_length}{A length to check against. Throws an error if \code{arg} has a \emph{different} length.}

\item{not_length}{A length to check against. Throw an error if \code{arg} has \emph{this} length.}

\item{length_fn}{Function for computing length, like
\code{\link[base:length]{length()}}, \code{\link[base:nrow]{nrow()}},
\code{\link[base:ncol]{ncol()}}, or \code{\link[base:nchar]{nchar()}}.

Consider passing a \code{length_name}, so the error message is meaningful.}

\item{allowed_values}{The values that \code{arg} is allowed to contain.

This check is implemented by applying \code{\link[base:setdiff]{setdiff()}}
to the recursively unlisted values in \code{arg}.
Note: If \code{arg} contains values of type character, the unlisting will
convert all elements to type character.}

\item{in_range}{The numeric range the values in \code{arg} should lie within.
Vector with 2 elements: \code{c(min, max)}.
\enumerate{
\item Throws error if the minimum value in \code{arg} is lower than the first value of \code{in_range}.
\item Throws error if the maximum value in \code{arg} is higher than the second value of \code{in_range}.
}

\code{\link[base:range]{range()}} is called on the recursively unlisted values in \code{arg} and
compared to the sorted \code{in_range}.}

\item{allowed_names}{The names that \code{arg} is \emph{allowed} to contain. \emph{Not recursive}.}

\item{required_names}{Names that \emph{must} be in \code{arg}. \emph{Not recursive}.}

\item{check_not_named}{Whether to ensure that \emph{none} of the elements are named. \emph{Not recursive}.}

\item{check_all_named}{Whether to ensure that \emph{all} of the elements are named. \emph{Not recursive}.}

\item{check_all_uniquely_named}{Whether to ensure that \emph{all} of the elements are \emph{uniquely} named. \emph{Not recursive}.}

\item{allow_null}{Whether \code{arg} is allowed to be \code{NULL}.
If \code{TRUE} and \code{arg} is \code{NULL}, the remaining checks are ignored.}

\item{arg_name}{Name of the argument, for improved error messaging.
If \code{NULL}, it is inferred via \code{deparse(substitute(arg))}.}

\item{type_name}{Name of the type(s) checked for with \code{type_check_fn}, for improved error messaging.
If \code{NULL}, it may be inferred via \code{deparse(substitute(type_check_fn))}.}

\item{length_name}{Name of the length measure for the error message. (Character)

Default values depend on the supplied \code{length_fn}:
"row count" for \code{\link[base:nrow]{nrow()}},
"column count" for \code{\link[base:ncol]{ncol()}},
"character count" for \code{\link[base:nchar]{nchar()}} and
"length" for anything else, including \code{\link[base:length]{length()}}.}

\item{message_fn}{Function for communicating the error message to the user.

By default, \code{\link[base:stop]{stop}} is used to throw an error.

The \code{\link[base:return]{return}} function is treated specially: If a check doesn't pass,
the error message is returned as a string.}

\item{...}{Any argument will be passed directly to \code{check_arg}.}
}
\value{
Throws an error with a suitable error message if any of the checks fail.

Does not return anything by default.
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

Apply a set of common checks to a variable,
like the \strong{type}, \strong{length}, \strong{allowed values}, and whether
elements are \strong{named} properly.
}
\section{Functions}{
\itemize{
\item \code{check_arg_str}: Wrapper for returning the message as a string.
}}

\examples{
# Attach packages
library(rtilities2)

# Defining a set of variables
x <- c(1,2,3,4,5)
y <- c("a","b","d")
z <- data.frame("o" = c(0,0,0), "u" = c(1,2,3))
n <- NULL
\donttest{
# Check the variables
check_arg(x) # passes
check_arg(x, has_length = 6) # fails due to wrong length
check_arg(z, has_length = 4, length_fn = nrow) # fails due to wrong row count
check_arg(y, type_check_fn = is.numeric) # fails due to wrong type
check_arg(y, type_check_fn = is.numeric, type_name = "numeric") # fails due to wrong type
check_arg(z, check_not_named = TRUE) # fails due to names
check_arg(z, allowed_names = c("n","o")) # fails as "u" isn't an allowed name
check_arg(z, required_names = c("n","o")) # fails due to lack of "n" column
check_arg(n, allow_null = FALSE) # fails due to being NULL
check_arg(n, allow_null = TRUE) # passes

# Multiple checks at once
check_arg(z,
          type_check_fn = is.data.frame, # passes
          has_length = 2, # passes
          required_names = c("o"), # passes
          in_range = c(1,3)) # fails due to 0s in "o" column

# Error messages as strings
check_arg_str(x, not_length = 5)
check_arg(x, not_length = 5, message_fn = return)
}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}

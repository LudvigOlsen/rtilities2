% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_multiple_arguments.R
\name{multicheck}
\alias{multicheck}
\title{Report multiple checks at once}
\usage{
multicheck(
  ...,
  context = "",
  message_fn = stop,
  message_type = "error",
  first_n = 5
)
}
\arguments{
\item{...}{The messages to report. As made with \code{\link[rtilities2:check_arg_str]{check_arg_str()}}.

\code{NULL} elements will be ignored, why it's fine to supply a check that doesn't fail.

Can be named. Names will only be used if \emph{all} the messages to be reported are named.}

\item{context}{Usually the name of the function calling the check. (Character)}

\item{message_fn}{Function for communicating the error message to the user.

By default, \code{\link[base:stop]{stop}} is used to throw an error.

The \code{\link[base:return]{return}} function can be supplied in order to return the message as a string.}

\item{message_type}{The type of message in lower case. Defaults to \code{"error"}.}

\item{first_n}{The maximum number of messages to message.}
}
\value{
Throws an error with the collected error messages.

Does not return anything by default.
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

Wraps a set of variable checks and reports the messages.
The checks must return the message as a string.
}
\examples{
# Attach packages
library(rtilities2)

# Defining a set of variables
x <- c(1,2,3,4,5)
y <- c("a","b","d")
z <- data.frame("o" = c(0,0,0), "u" = c(1,2,3))

\donttest{
# Reporting tests for all variables at once
# Tip: use check_arg_str
multicheck(
  check_arg_str(x, has_length = 6), # fails due to wrong length
  check_arg_str(y, type_check_fn = is.numeric), # fails due to wrong type
  check_arg_str(z, check_not_named = TRUE), # fails due to names
  check_arg_str(x), # passes
  context = "myFunction"
)

# Named checks
multicheck(
  x.length = check_arg_str(x, has_length = 6), # fails due to wrong length
  y.type = check_arg_str(y, type_check_fn = is.numeric), # fails due to wrong type
  z.named = check_arg_str(z, check_not_named = TRUE), # fails due to names
  x.none = check_arg_str(x), # passes
  context = "myFunction"
)
}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
